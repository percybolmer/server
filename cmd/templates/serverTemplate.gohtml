// package {{.PackageName}} is generated by server
package {{.PackageName}}

import (
	"github.com/percybolmer/server"
	"fmt"
	"github.com/percybolmer/credentials"
	{{ if .Gorm }} "github.com/jinzhu/gorm" {{end}}
	{{ if (eq .DbDriver "postgres")}} _"github.com/jinzhu/gorm/dialects/postgres" {{else if (eq .DbDriver "mysql")}} _ "github.com/go-sql-driver/mysql" {{end}}
)

// {{.ServerName}} is a generated Server, Please comment --- 
type {{.ServerName}} struct {
	id          string
	credentials *credentials.Credentials
	{{ if .Gorm }} db          *gorm.DB {{else if .Db}} db *sql.DB{{end}}
}

// New{{.ServerName}} is a function used to initailze a new {{.ServerName}} object, it will make sure
// that all neccesarry fields are initialized to avoid nil pointer exceptions
// id Should be Unique for each server
func New{{.ServerName}}(id string) *{{.ServerName}} {
	return &{{.ServerName}}{
		id:          id,
		credentials: credentials.NewCredentials(),
	}
}
// Connect should handle a connection to the server
func (s *{{.ServerName}}) Connect(c *credentials.Credentials) error{
    {{ if .Db}} {{template "dbConnect" .}} {{end}}
}
// Reconnect should disconnect then reconnect 
func (s *{{.ServerName}}) Reconnect() error{
    {{ if .Db}} {{template "dbReconnect"}}{{end}}
}
// Disconnect should close server connection
func (s *{{.ServerName}}) Disconnect() error{
    {{ if .Db}} {{template "dbDisconnect"}}{{end}}
}
// TestConnection should Test connection and Reconnect if failure
func (s *{{.ServerName}}) TestConnection() error{
	{{ if .Db}} {{template "dbTestConnection"}}{{end}}
}
// Ping is used to test connection 
func (s *{{.ServerName}}) Ping() error{
	{{ if .Db}} {{template "dbPing"}}{{end}}
}
// GetUniqueIdentifier is responsible to return a Unique identifer for each Server object
func (s *{{.ServerName}}) GetUniqueIdentifier() string{
	return s.id
}

/** Add your own Functions down below */